// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"github.com/concourse/atc/exec"
	"github.com/concourse/atc/worker"
)

type FakeStepFactory struct {
	UsingStub        func(*worker.ArtifactRepository) exec.Step
	usingMutex       sync.RWMutex
	usingArgsForCall []struct {
		arg1 *worker.ArtifactRepository
	}
	usingReturns struct {
		result1 exec.Step
	}
	usingReturnsOnCall map[int]struct {
		result1 exec.Step
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStepFactory) Using(arg1 *worker.ArtifactRepository) exec.Step {
	fake.usingMutex.Lock()
	ret, specificReturn := fake.usingReturnsOnCall[len(fake.usingArgsForCall)]
	fake.usingArgsForCall = append(fake.usingArgsForCall, struct {
		arg1 *worker.ArtifactRepository
	}{arg1})
	fake.recordInvocation("Using", []interface{}{arg1})
	fake.usingMutex.Unlock()
	if fake.UsingStub != nil {
		return fake.UsingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.usingReturns.result1
}

func (fake *FakeStepFactory) UsingCallCount() int {
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	return len(fake.usingArgsForCall)
}

func (fake *FakeStepFactory) UsingArgsForCall(i int) *worker.ArtifactRepository {
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	return fake.usingArgsForCall[i].arg1
}

func (fake *FakeStepFactory) UsingReturns(result1 exec.Step) {
	fake.UsingStub = nil
	fake.usingReturns = struct {
		result1 exec.Step
	}{result1}
}

func (fake *FakeStepFactory) UsingReturnsOnCall(i int, result1 exec.Step) {
	fake.UsingStub = nil
	if fake.usingReturnsOnCall == nil {
		fake.usingReturnsOnCall = make(map[int]struct {
			result1 exec.Step
		})
	}
	fake.usingReturnsOnCall[i] = struct {
		result1 exec.Step
	}{result1}
}

func (fake *FakeStepFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStepFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.StepFactory = new(FakeStepFactory)
