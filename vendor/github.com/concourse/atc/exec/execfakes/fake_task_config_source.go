// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/exec"
)

type FakeTaskConfigSource struct {
	GetTaskConfigStub        func() (atc.TaskConfig, error)
	getTaskConfigMutex       sync.RWMutex
	getTaskConfigArgsForCall []struct{}
	getTaskConfigReturns     struct {
		result1 atc.TaskConfig
		result2 error
	}
	getTaskConfigReturnsOnCall map[int]struct {
		result1 atc.TaskConfig
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskConfigSource) GetTaskConfig() (atc.TaskConfig, error) {
	fake.getTaskConfigMutex.Lock()
	ret, specificReturn := fake.getTaskConfigReturnsOnCall[len(fake.getTaskConfigArgsForCall)]
	fake.getTaskConfigArgsForCall = append(fake.getTaskConfigArgsForCall, struct{}{})
	fake.recordInvocation("GetTaskConfig", []interface{}{})
	fake.getTaskConfigMutex.Unlock()
	if fake.GetTaskConfigStub != nil {
		return fake.GetTaskConfigStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTaskConfigReturns.result1, fake.getTaskConfigReturns.result2
}

func (fake *FakeTaskConfigSource) GetTaskConfigCallCount() int {
	fake.getTaskConfigMutex.RLock()
	defer fake.getTaskConfigMutex.RUnlock()
	return len(fake.getTaskConfigArgsForCall)
}

func (fake *FakeTaskConfigSource) GetTaskConfigReturns(result1 atc.TaskConfig, result2 error) {
	fake.GetTaskConfigStub = nil
	fake.getTaskConfigReturns = struct {
		result1 atc.TaskConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskConfigSource) GetTaskConfigReturnsOnCall(i int, result1 atc.TaskConfig, result2 error) {
	fake.GetTaskConfigStub = nil
	if fake.getTaskConfigReturnsOnCall == nil {
		fake.getTaskConfigReturnsOnCall = make(map[int]struct {
			result1 atc.TaskConfig
			result2 error
		})
	}
	fake.getTaskConfigReturnsOnCall[i] = struct {
		result1 atc.TaskConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskConfigSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTaskConfigMutex.RLock()
	defer fake.getTaskConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskConfigSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.TaskConfigSource = new(FakeTaskConfigSource)
