// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/exec"
)

type FakeActionsBuildEventsDelegate struct {
	ActionCompletedStub        func(lager.Logger, exec.Action)
	actionCompletedMutex       sync.RWMutex
	actionCompletedArgsForCall []struct {
		arg1 lager.Logger
		arg2 exec.Action
	}
	FailedStub        func(lager.Logger, error)
	failedMutex       sync.RWMutex
	failedArgsForCall []struct {
		arg1 lager.Logger
		arg2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActionsBuildEventsDelegate) ActionCompleted(arg1 lager.Logger, arg2 exec.Action) {
	fake.actionCompletedMutex.Lock()
	fake.actionCompletedArgsForCall = append(fake.actionCompletedArgsForCall, struct {
		arg1 lager.Logger
		arg2 exec.Action
	}{arg1, arg2})
	fake.recordInvocation("ActionCompleted", []interface{}{arg1, arg2})
	fake.actionCompletedMutex.Unlock()
	if fake.ActionCompletedStub != nil {
		fake.ActionCompletedStub(arg1, arg2)
	}
}

func (fake *FakeActionsBuildEventsDelegate) ActionCompletedCallCount() int {
	fake.actionCompletedMutex.RLock()
	defer fake.actionCompletedMutex.RUnlock()
	return len(fake.actionCompletedArgsForCall)
}

func (fake *FakeActionsBuildEventsDelegate) ActionCompletedArgsForCall(i int) (lager.Logger, exec.Action) {
	fake.actionCompletedMutex.RLock()
	defer fake.actionCompletedMutex.RUnlock()
	return fake.actionCompletedArgsForCall[i].arg1, fake.actionCompletedArgsForCall[i].arg2
}

func (fake *FakeActionsBuildEventsDelegate) Failed(arg1 lager.Logger, arg2 error) {
	fake.failedMutex.Lock()
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct {
		arg1 lager.Logger
		arg2 error
	}{arg1, arg2})
	fake.recordInvocation("Failed", []interface{}{arg1, arg2})
	fake.failedMutex.Unlock()
	if fake.FailedStub != nil {
		fake.FailedStub(arg1, arg2)
	}
}

func (fake *FakeActionsBuildEventsDelegate) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *FakeActionsBuildEventsDelegate) FailedArgsForCall(i int) (lager.Logger, error) {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return fake.failedArgsForCall[i].arg1, fake.failedArgsForCall[i].arg2
}

func (fake *FakeActionsBuildEventsDelegate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actionCompletedMutex.RLock()
	defer fake.actionCompletedMutex.RUnlock()
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeActionsBuildEventsDelegate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.ActionsBuildEventsDelegate = new(FakeActionsBuildEventsDelegate)
