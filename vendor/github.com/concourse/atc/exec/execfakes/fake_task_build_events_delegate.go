// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/exec"
)

type FakeTaskBuildEventsDelegate struct {
	InitializingStub        func(lager.Logger, atc.TaskConfig)
	initializingMutex       sync.RWMutex
	initializingArgsForCall []struct {
		arg1 lager.Logger
		arg2 atc.TaskConfig
	}
	StartingStub        func(lager.Logger, atc.TaskConfig)
	startingMutex       sync.RWMutex
	startingArgsForCall []struct {
		arg1 lager.Logger
		arg2 atc.TaskConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskBuildEventsDelegate) Initializing(arg1 lager.Logger, arg2 atc.TaskConfig) {
	fake.initializingMutex.Lock()
	fake.initializingArgsForCall = append(fake.initializingArgsForCall, struct {
		arg1 lager.Logger
		arg2 atc.TaskConfig
	}{arg1, arg2})
	fake.recordInvocation("Initializing", []interface{}{arg1, arg2})
	fake.initializingMutex.Unlock()
	if fake.InitializingStub != nil {
		fake.InitializingStub(arg1, arg2)
	}
}

func (fake *FakeTaskBuildEventsDelegate) InitializingCallCount() int {
	fake.initializingMutex.RLock()
	defer fake.initializingMutex.RUnlock()
	return len(fake.initializingArgsForCall)
}

func (fake *FakeTaskBuildEventsDelegate) InitializingArgsForCall(i int) (lager.Logger, atc.TaskConfig) {
	fake.initializingMutex.RLock()
	defer fake.initializingMutex.RUnlock()
	return fake.initializingArgsForCall[i].arg1, fake.initializingArgsForCall[i].arg2
}

func (fake *FakeTaskBuildEventsDelegate) Starting(arg1 lager.Logger, arg2 atc.TaskConfig) {
	fake.startingMutex.Lock()
	fake.startingArgsForCall = append(fake.startingArgsForCall, struct {
		arg1 lager.Logger
		arg2 atc.TaskConfig
	}{arg1, arg2})
	fake.recordInvocation("Starting", []interface{}{arg1, arg2})
	fake.startingMutex.Unlock()
	if fake.StartingStub != nil {
		fake.StartingStub(arg1, arg2)
	}
}

func (fake *FakeTaskBuildEventsDelegate) StartingCallCount() int {
	fake.startingMutex.RLock()
	defer fake.startingMutex.RUnlock()
	return len(fake.startingArgsForCall)
}

func (fake *FakeTaskBuildEventsDelegate) StartingArgsForCall(i int) (lager.Logger, atc.TaskConfig) {
	fake.startingMutex.RLock()
	defer fake.startingMutex.RUnlock()
	return fake.startingArgsForCall[i].arg1, fake.startingArgsForCall[i].arg2
}

func (fake *FakeTaskBuildEventsDelegate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializingMutex.RLock()
	defer fake.initializingMutex.RUnlock()
	fake.startingMutex.RLock()
	defer fake.startingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskBuildEventsDelegate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.TaskBuildEventsDelegate = new(FakeTaskBuildEventsDelegate)
