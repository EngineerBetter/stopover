// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/creds"
	"github.com/concourse/atc/worker"
)

type FakeImageFactory struct {
	GetImageStub        func(logger lager.Logger, workerClient worker.Worker, volumeClient worker.VolumeClient, imageSpec worker.ImageSpec, teamID int, delegate worker.ImageFetchingDelegate, resourceTypes creds.VersionedResourceTypes) (worker.Image, error)
	getImageMutex       sync.RWMutex
	getImageArgsForCall []struct {
		logger        lager.Logger
		workerClient  worker.Worker
		volumeClient  worker.VolumeClient
		imageSpec     worker.ImageSpec
		teamID        int
		delegate      worker.ImageFetchingDelegate
		resourceTypes creds.VersionedResourceTypes
	}
	getImageReturns struct {
		result1 worker.Image
		result2 error
	}
	getImageReturnsOnCall map[int]struct {
		result1 worker.Image
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageFactory) GetImage(logger lager.Logger, workerClient worker.Worker, volumeClient worker.VolumeClient, imageSpec worker.ImageSpec, teamID int, delegate worker.ImageFetchingDelegate, resourceTypes creds.VersionedResourceTypes) (worker.Image, error) {
	fake.getImageMutex.Lock()
	ret, specificReturn := fake.getImageReturnsOnCall[len(fake.getImageArgsForCall)]
	fake.getImageArgsForCall = append(fake.getImageArgsForCall, struct {
		logger        lager.Logger
		workerClient  worker.Worker
		volumeClient  worker.VolumeClient
		imageSpec     worker.ImageSpec
		teamID        int
		delegate      worker.ImageFetchingDelegate
		resourceTypes creds.VersionedResourceTypes
	}{logger, workerClient, volumeClient, imageSpec, teamID, delegate, resourceTypes})
	fake.recordInvocation("GetImage", []interface{}{logger, workerClient, volumeClient, imageSpec, teamID, delegate, resourceTypes})
	fake.getImageMutex.Unlock()
	if fake.GetImageStub != nil {
		return fake.GetImageStub(logger, workerClient, volumeClient, imageSpec, teamID, delegate, resourceTypes)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getImageReturns.result1, fake.getImageReturns.result2
}

func (fake *FakeImageFactory) GetImageCallCount() int {
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	return len(fake.getImageArgsForCall)
}

func (fake *FakeImageFactory) GetImageArgsForCall(i int) (lager.Logger, worker.Worker, worker.VolumeClient, worker.ImageSpec, int, worker.ImageFetchingDelegate, creds.VersionedResourceTypes) {
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	return fake.getImageArgsForCall[i].logger, fake.getImageArgsForCall[i].workerClient, fake.getImageArgsForCall[i].volumeClient, fake.getImageArgsForCall[i].imageSpec, fake.getImageArgsForCall[i].teamID, fake.getImageArgsForCall[i].delegate, fake.getImageArgsForCall[i].resourceTypes
}

func (fake *FakeImageFactory) GetImageReturns(result1 worker.Image, result2 error) {
	fake.GetImageStub = nil
	fake.getImageReturns = struct {
		result1 worker.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageFactory) GetImageReturnsOnCall(i int, result1 worker.Image, result2 error) {
	fake.GetImageStub = nil
	if fake.getImageReturnsOnCall == nil {
		fake.getImageReturnsOnCall = make(map[int]struct {
			result1 worker.Image
			result2 error
		})
	}
	fake.getImageReturnsOnCall[i] = struct {
		result1 worker.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.ImageFactory = new(FakeImageFactory)
