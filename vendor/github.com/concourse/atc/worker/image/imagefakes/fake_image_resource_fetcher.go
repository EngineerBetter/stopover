// Code generated by counterfeiter. DO NOT EDIT.
package imagefakes

import (
	"io"
	"os"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/worker"
	"github.com/concourse/atc/worker/image"
)

type FakeImageResourceFetcher struct {
	FetchStub        func(logger lager.Logger, cancel <-chan os.Signal, container db.CreatingContainer, privileged bool) (worker.Volume, io.ReadCloser, atc.Version, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		logger     lager.Logger
		cancel     <-chan os.Signal
		container  db.CreatingContainer
		privileged bool
	}
	fetchReturns struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageResourceFetcher) Fetch(logger lager.Logger, cancel <-chan os.Signal, container db.CreatingContainer, privileged bool) (worker.Volume, io.ReadCloser, atc.Version, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		logger     lager.Logger
		cancel     <-chan os.Signal
		container  db.CreatingContainer
		privileged bool
	}{logger, cancel, container, privileged})
	fake.recordInvocation("Fetch", []interface{}{logger, cancel, container, privileged})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(logger, cancel, container, privileged)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2, fake.fetchReturns.result3, fake.fetchReturns.result4
}

func (fake *FakeImageResourceFetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeImageResourceFetcher) FetchArgsForCall(i int) (lager.Logger, <-chan os.Signal, db.CreatingContainer, bool) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].logger, fake.fetchArgsForCall[i].cancel, fake.fetchArgsForCall[i].container, fake.fetchArgsForCall[i].privileged
}

func (fake *FakeImageResourceFetcher) FetchReturns(result1 worker.Volume, result2 io.ReadCloser, result3 atc.Version, result4 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeImageResourceFetcher) FetchReturnsOnCall(i int, result1 worker.Volume, result2 io.ReadCloser, result3 atc.Version, result4 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 worker.Volume
			result2 io.ReadCloser
			result3 atc.Version
			result4 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeImageResourceFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageResourceFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.ImageResourceFetcher = new(FakeImageResourceFetcher)
