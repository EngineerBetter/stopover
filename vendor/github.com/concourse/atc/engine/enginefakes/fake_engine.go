// Code generated by counterfeiter. DO NOT EDIT.
package enginefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/engine"
)

type FakeEngine struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	CreateBuildStub        func(lager.Logger, db.Build, atc.Plan) (engine.Build, error)
	createBuildMutex       sync.RWMutex
	createBuildArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.Build
		arg3 atc.Plan
	}
	createBuildReturns struct {
		result1 engine.Build
		result2 error
	}
	createBuildReturnsOnCall map[int]struct {
		result1 engine.Build
		result2 error
	}
	LookupBuildStub        func(lager.Logger, db.Build) (engine.Build, error)
	lookupBuildMutex       sync.RWMutex
	lookupBuildArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.Build
	}
	lookupBuildReturns struct {
		result1 engine.Build
		result2 error
	}
	lookupBuildReturnsOnCall map[int]struct {
		result1 engine.Build
		result2 error
	}
	ReleaseAllStub        func(lager.Logger)
	releaseAllMutex       sync.RWMutex
	releaseAllArgsForCall []struct {
		arg1 lager.Logger
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEngine) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeEngine) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeEngine) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEngine) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeEngine) CreateBuild(arg1 lager.Logger, arg2 db.Build, arg3 atc.Plan) (engine.Build, error) {
	fake.createBuildMutex.Lock()
	ret, specificReturn := fake.createBuildReturnsOnCall[len(fake.createBuildArgsForCall)]
	fake.createBuildArgsForCall = append(fake.createBuildArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.Build
		arg3 atc.Plan
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateBuild", []interface{}{arg1, arg2, arg3})
	fake.createBuildMutex.Unlock()
	if fake.CreateBuildStub != nil {
		return fake.CreateBuildStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createBuildReturns.result1, fake.createBuildReturns.result2
}

func (fake *FakeEngine) CreateBuildCallCount() int {
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	return len(fake.createBuildArgsForCall)
}

func (fake *FakeEngine) CreateBuildArgsForCall(i int) (lager.Logger, db.Build, atc.Plan) {
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	return fake.createBuildArgsForCall[i].arg1, fake.createBuildArgsForCall[i].arg2, fake.createBuildArgsForCall[i].arg3
}

func (fake *FakeEngine) CreateBuildReturns(result1 engine.Build, result2 error) {
	fake.CreateBuildStub = nil
	fake.createBuildReturns = struct {
		result1 engine.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeEngine) CreateBuildReturnsOnCall(i int, result1 engine.Build, result2 error) {
	fake.CreateBuildStub = nil
	if fake.createBuildReturnsOnCall == nil {
		fake.createBuildReturnsOnCall = make(map[int]struct {
			result1 engine.Build
			result2 error
		})
	}
	fake.createBuildReturnsOnCall[i] = struct {
		result1 engine.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeEngine) LookupBuild(arg1 lager.Logger, arg2 db.Build) (engine.Build, error) {
	fake.lookupBuildMutex.Lock()
	ret, specificReturn := fake.lookupBuildReturnsOnCall[len(fake.lookupBuildArgsForCall)]
	fake.lookupBuildArgsForCall = append(fake.lookupBuildArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.Build
	}{arg1, arg2})
	fake.recordInvocation("LookupBuild", []interface{}{arg1, arg2})
	fake.lookupBuildMutex.Unlock()
	if fake.LookupBuildStub != nil {
		return fake.LookupBuildStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.lookupBuildReturns.result1, fake.lookupBuildReturns.result2
}

func (fake *FakeEngine) LookupBuildCallCount() int {
	fake.lookupBuildMutex.RLock()
	defer fake.lookupBuildMutex.RUnlock()
	return len(fake.lookupBuildArgsForCall)
}

func (fake *FakeEngine) LookupBuildArgsForCall(i int) (lager.Logger, db.Build) {
	fake.lookupBuildMutex.RLock()
	defer fake.lookupBuildMutex.RUnlock()
	return fake.lookupBuildArgsForCall[i].arg1, fake.lookupBuildArgsForCall[i].arg2
}

func (fake *FakeEngine) LookupBuildReturns(result1 engine.Build, result2 error) {
	fake.LookupBuildStub = nil
	fake.lookupBuildReturns = struct {
		result1 engine.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeEngine) LookupBuildReturnsOnCall(i int, result1 engine.Build, result2 error) {
	fake.LookupBuildStub = nil
	if fake.lookupBuildReturnsOnCall == nil {
		fake.lookupBuildReturnsOnCall = make(map[int]struct {
			result1 engine.Build
			result2 error
		})
	}
	fake.lookupBuildReturnsOnCall[i] = struct {
		result1 engine.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeEngine) ReleaseAll(arg1 lager.Logger) {
	fake.releaseAllMutex.Lock()
	fake.releaseAllArgsForCall = append(fake.releaseAllArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("ReleaseAll", []interface{}{arg1})
	fake.releaseAllMutex.Unlock()
	if fake.ReleaseAllStub != nil {
		fake.ReleaseAllStub(arg1)
	}
}

func (fake *FakeEngine) ReleaseAllCallCount() int {
	fake.releaseAllMutex.RLock()
	defer fake.releaseAllMutex.RUnlock()
	return len(fake.releaseAllArgsForCall)
}

func (fake *FakeEngine) ReleaseAllArgsForCall(i int) lager.Logger {
	fake.releaseAllMutex.RLock()
	defer fake.releaseAllMutex.RUnlock()
	return fake.releaseAllArgsForCall[i].arg1
}

func (fake *FakeEngine) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	fake.lookupBuildMutex.RLock()
	defer fake.lookupBuildMutex.RUnlock()
	fake.releaseAllMutex.RLock()
	defer fake.releaseAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEngine) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ engine.Engine = new(FakeEngine)
