// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeWorkerBaseResourceTypeFactory struct {
	FindStub        func(name string, worker db.Worker) (*db.UsedWorkerBaseResourceType, bool, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		name   string
		worker db.Worker
	}
	findReturns struct {
		result1 *db.UsedWorkerBaseResourceType
		result2 bool
		result3 error
	}
	findReturnsOnCall map[int]struct {
		result1 *db.UsedWorkerBaseResourceType
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerBaseResourceTypeFactory) Find(name string, worker db.Worker) (*db.UsedWorkerBaseResourceType, bool, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		name   string
		worker db.Worker
	}{name, worker})
	fake.recordInvocation("Find", []interface{}{name, worker})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(name, worker)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.findReturns.result1, fake.findReturns.result2, fake.findReturns.result3
}

func (fake *FakeWorkerBaseResourceTypeFactory) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeWorkerBaseResourceTypeFactory) FindArgsForCall(i int) (string, db.Worker) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].name, fake.findArgsForCall[i].worker
}

func (fake *FakeWorkerBaseResourceTypeFactory) FindReturns(result1 *db.UsedWorkerBaseResourceType, result2 bool, result3 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 *db.UsedWorkerBaseResourceType
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerBaseResourceTypeFactory) FindReturnsOnCall(i int, result1 *db.UsedWorkerBaseResourceType, result2 bool, result3 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 *db.UsedWorkerBaseResourceType
			result2 bool
			result3 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 *db.UsedWorkerBaseResourceType
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerBaseResourceTypeFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerBaseResourceTypeFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.WorkerBaseResourceTypeFactory = new(FakeWorkerBaseResourceTypeFactory)
